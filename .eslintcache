[{"/Users/i537677/Documents/tw-redux/src/index.js":"1","/Users/i537677/Documents/tw-redux/src/App.js":"2","/Users/i537677/Documents/tw-redux/src/serviceWorker.js":"3","/Users/i537677/Documents/tw-redux/src/app/store.js":"4","/Users/i537677/Documents/tw-redux/src/features/counter/counterSlice.js":"5","/Users/i537677/Documents/tw-redux/src/features/counter/Counter.js":"6","/Users/i537677/Documents/tw-redux/src/features/todos/todoSlice.js":"7","/Users/i537677/Documents/tw-redux/src/features/todos/TodoInput.jsx":"8","/Users/i537677/Documents/tw-redux/src/features/todos/TodoList.jsx":"9","/Users/i537677/Documents/tw-redux/src/features/todos/TodoItem.jsx":"10","/Users/i537677/Documents/tw-redux/src/features/todos/KeyboardShortcuts.jsx":"11","/Users/i537677/Documents/tw-redux/src/features/todos/Trash.jsx":"12"},{"size":877,"mtime":1607394466590,"results":"13","hashOfConfig":"14"},{"size":1337,"mtime":1607444104367,"results":"15","hashOfConfig":"14"},{"size":5141,"mtime":1607374074865,"results":"16","hashOfConfig":"14"},{"size":660,"mtime":1607394785320,"results":"17","hashOfConfig":"14"},{"size":1551,"mtime":1607374074864,"results":"18","hashOfConfig":"14"},{"size":1628,"mtime":1607378336337,"results":"19","hashOfConfig":"14"},{"size":741,"mtime":1607393010906,"results":"20","hashOfConfig":"14"},{"size":1438,"mtime":1607440304711,"results":"21","hashOfConfig":"14"},{"size":1115,"mtime":1607443055418,"results":"22","hashOfConfig":"14"},{"size":1103,"mtime":1607444141868,"results":"23","hashOfConfig":"14"},{"size":1098,"mtime":1607443765859,"results":"24","hashOfConfig":"14"},{"size":596,"mtime":1607443565017,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jl7iuk",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/i537677/Documents/tw-redux/src/index.js",[],["55","56"],"/Users/i537677/Documents/tw-redux/src/App.js",[],"/Users/i537677/Documents/tw-redux/src/serviceWorker.js",[],"/Users/i537677/Documents/tw-redux/src/app/store.js",["57"],"import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport todoReducer from \"../features/todos/todoSlice\";\r\n\r\nconst reducers = combineReducers({\r\n  todos: todoReducer,\r\n});\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  // you could add the following:\r\n  // whitelist: ['reducerNameYouWantToPersist']\r\n\r\n  // as we do not have that, everything is stored!\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n});\r\n\r\nexport default store;\r\n","/Users/i537677/Documents/tw-redux/src/features/counter/counterSlice.js",[],["58","59"],"/Users/i537677/Documents/tw-redux/src/features/counter/Counter.js",[],"/Users/i537677/Documents/tw-redux/src/features/todos/todoSlice.js",[],"/Users/i537677/Documents/tw-redux/src/features/todos/TodoInput.jsx",[],"/Users/i537677/Documents/tw-redux/src/features/todos/TodoList.jsx",["60","61"],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport darkModeShapes from \"../../svgs/darkModeShapes.svg\";\nimport lightModeShapes from \"../../svgs/lightModeShapes.svg\";\nimport TodoItem from \"./TodoItem\";\n\nexport default function TodoList(props) {\n  const selectTodos = (state) => state.todos;\n  const todos = useSelector(selectTodos);\n\n  const deletedTodos = todos.filter((todo) => todo.deleted === true);\n\n  if (todos.length === 0 || deletedTodos.length === todos.length) {\n    return (\n      <div className=\"flex flex-col justify-center align-middle h-half-screen\">\n        <div>\n          <img src={lightModeShapes} className=\"mx-auto mb-5\" />\n          <h2>Todo: Add some Todos</h2>\n        </div>\n      </div>\n    );\n  } else {\n    console.log(todos);\n    return (\n      <div>\n        {todos.map((todo, index) =>\n          todo.deleted ? (\n            <></>\n          ) : (\n            <TodoItem\n              id={todo.id}\n              key={index}\n              title={todo.title}\n              completed={todo.completed}\n            />\n          )\n        )}\n      </div>\n    );\n  }\n}\n","/Users/i537677/Documents/tw-redux/src/features/todos/TodoItem.jsx",[],"/Users/i537677/Documents/tw-redux/src/features/todos/KeyboardShortcuts.jsx",["62"],"import React from \"react\";\nimport { Command } from \"tabler-icons-react\";\nimport { useSelector } from \"react-redux\";\n\nexport default function KeyboardShortcuts() {\n  const selectTodos = (state) => state.todos;\n  const todos = useSelector(selectTodos);\n\n  const deletedTodos = todos.filter((todo) => todo.deleted === true);\n  const deletedShortcut = () => {\n    if (deletedTodos.length > 0) {\n      return (\n        <div className=\"mx-autof mt-2 flex justify-center align-middle\">\n          <Command />\n          <p>\n            + <span className=\"font-bold\">U</span> to show deleted todos.\n          </p>\n        </div>\n      );\n    }\n  };\n  return (\n    <>\n      <div className=\"mx-autof flex justify-center align-middle\">\n        <Command />\n        <p>\n          + <span className=\"font-bold\">K</span> to add reminder.\n        </p>\n      </div>\n      {/* {deletedShortcut()} */}\n      <div className=\"mx-autof mt-2 flex justify-center align-middle\">\n        <p>\n          <span className=\"font-bold\">Click</span> on a todo to toggle\n          completion.\n        </p>\n      </div>\n    </>\n  );\n}\n","/Users/i537677/Documents/tw-redux/src/features/todos/Trash.jsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":26,"nodeType":"69","messageId":"70","endLine":2,"endColumn":38},{"ruleId":"63","replacedBy":"71"},{"ruleId":"65","replacedBy":"72"},{"ruleId":"67","severity":1,"message":"73","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":22},{"ruleId":"74","severity":1,"message":"75","line":17,"column":11,"nodeType":"76","endLine":17,"endColumn":65},{"ruleId":"67","severity":1,"message":"77","line":10,"column":9,"nodeType":"69","messageId":"70","endLine":10,"endColumn":24},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'persistStore' is defined but never used.","Identifier","unusedVar",["78"],["79"],"'darkModeShapes' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'deletedShortcut' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]